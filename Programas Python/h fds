Help on class list in module __builtin__:

class lliisstt(object)
 |  list() -> new empty list
 |  list(iterable) -> new list initialized from iterable's items
 |  
 |  Methods defined here:
 |  
 |  ____aadddd____(...)
 |      x.__add__(y) <==> x+y
 |  
 |  ____ccoonnttaaiinnss____(...)
 |      x.__contains__(y) <==> y in x
 |  
 |  ____ddeelliitteemm____(...)
 |      x.__delitem__(y) <==> del x[y]
 |  
 |  ____ddeellsslliiccee____(...)
 |      x.__delslice__(i, j) <==> del x[i:j]
 |      
 |      Use of negative indices is not supported.
 |  
 |  ____eeqq____(...)
 |      x.__eq__(y) <==> x==y
 |  
 |  ____ggee____(...)
 |      x.__ge__(y) <==> x>=y
 |  
 |  ____ggeettaattttrriibbuuttee____(...)
 |      x.__getattribute__('name') <==> x.name
 |  
 |  ____ggeettiitteemm____(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  ____ggeettsslliiccee____(...)
 |      x.__getslice__(i, j) <==> x[i:j]
 |      
 |      Use of negative indices is not supported.
 |  
 |  ____ggtt____(...)
 |      x.__gt__(y) <==> x>y
 |  
 |  ____iiaadddd____(...)
 |      x.__iadd__(y) <==> x+=y
 |  
 |  ____iimmuull____(...)
 |      x.__imul__(y) <==> x*=y
 |  
 |  ____iinniitt____(...)
 |      x.__init__(...) initializes x; see x.__class__.__doc__ for signature
 |  
 |  ____iitteerr____(...)
 |      x.__iter__() <==> iter(x)
 |  
 |  ____llee____(...)
 |      x.__le__(y) <==> x<=y
 |  
 |  ____lleenn____(...)
 |      x.__len__() <==> len(x)
 |  
 |  ____lltt____(...)
 |      x.__lt__(y) <==> x<y
 |  
 |  ____mmuull____(...)
 |      x.__mul__(n) <==> x*n
 |  
 |  ____nnee____(...)
 |      x.__ne__(y) <==> x!=y
 |  
 |  ____rreepprr____(...)
 |      x.__repr__() <==> repr(x)
 |  
 |  ____rreevveerrsseedd____(...)
 |      L.__reversed__() -- return a reverse iterator over the list
 |  
 |  ____rrmmuull____(...)
 |      x.__rmul__(n) <==> n*x
 |  
 |  ____sseettiitteemm____(...)
 |      x.__setitem__(i, y) <==> x[i]=y
 |  
 |  ____sseettsslliiccee____(...)
 |      x.__setslice__(i, j, y) <==> x[i:j]=y
 |      
 |      Use  of negative indices is not supported.
 |  
 |  ____ssiizzeeooff____(...)
 |      L.__sizeof__() -- size of L in memory, in bytes
 |  
 |  aappppeenndd(...)
 |      L.append(object) -- append object to end
 |  
 |  ccoouunntt(...)
 |      L.count(value) -> integer -- return number of occurrences of value
 |  
 |  eexxtteenndd(...)
 |      L.extend(iterable) -- extend list by appending elements from the iterable
 |  
 |  iinnddeexx(...)
 |      L.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
 |  
 |  iinnsseerrtt(...)
 |      L.insert(index, object) -- insert object before index
 |  
 |  ppoopp(...)
 |      L.pop([index]) -> item -- remove and return item at index (default last).
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  rreemmoovvee(...)
 |      L.remove(value) -- remove first occurrence of value.
 |      Raises ValueError if the value is not present.
 |  
 |  rreevveerrssee(...)
 |      L.reverse() -- reverse *IN PLACE*
 |  
 |  ssoorrtt(...)
 |      L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;
 |      cmp(x, y) -> -1, 0, 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  ____hhaasshh____ = None
 |  
 |  ____nneeww____ = <built-in method __new__ of type object>
 |      T.__new__(S, ...) -> a new object with type S, a subtype of T
